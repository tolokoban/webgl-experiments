<page $title="Boulder Dash">
<img src="css/assets/boulder-dash/screen-shot.jpg" class="right"/>
    
Boulder Dash&trade; est un jeu créé en 1984 par la société First Start. Le héro est une taupe qui creuse des tunnels pour récupérer des diamants tout en évitant de se faire écraser par des pierres. C'est donc un jeu de 2D avec scrolling horizontal et vertical et nous allons en faire un mini-clone en WebGL.


# Les tableaux

Le plus simple pour décrire un tableau est de le faire sous forme de texte :
<x-code>
[
  "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
  "w......_..d.r_.....r.r......._....r....w",
  "w.rEr......_.........rd..r...._....._..w",
  "w.........._..r.....r.r..r........r....w",
  "wr.rr.........r......r..r....r...r.....w",
  "wr._r........._r..r........r......r.rr.w",
  "w..._..r........r.....r._r........r.rr.w",
  "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwww...r..r.w",
  "w._...r..d._..r.r..........d.rd......_.w",
  "w..d.....r....._........rr_r..r....r...w",
  "w...r..r.r..............r_.r..r........w",
  "w.r.....r........rrr.......r.._.d....r.w",
  "w.d.._..r.__.....r.rd..d....r...r..d._.w",
  "w._r..............r_r..r........d.....rw",
  "w........wwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
  "w_r.........r...d....r.....r...r.......w",
  "w_r........._r..r........r......r.rr..Xw",
  "w._..r........r.....r.__....d...r.rr...w",
  "w....rd..r........r......r.rd......r...w",
  "w..._..r._..r.rr.........r.rd......_..rw",
  "w.d...._....._........._.r..r....r...r.w",
  "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"
]    
</x-code>

Voici la légende :
* **w** : Mur. Indestructible et immobile.
* **_** : Vide.
* **.** : Terre. Destructible et immobile.
* **r** : Pierre. Indestructible et mobile.
* **d** : Diamant. Destructible et mobile.
* **E** : Entrée. Où le héro va apparaître.
* **X** : Sortie. Où il doit aller pour terminer le tableau.

# Le système de coordonnées

Nous allons faire en sorte que le jeu fonctionne sur ordinateur, tablette et téléphone.
Il faut donc s'adapter à différentes tailles d'écrans.
Mais d'un autre côté, nous nous imposons de respecter les pixels des images d'origine.
Nous décidons donc qu'une cellule aura une taille de 64x64 pixels sur les écrans de plus de 480 pixels (dans sa plus petite dimension) et de 32x32 sur les autres.

<ex src="mod/assets/boulder-dash/coords.vert" label="Fonction à insérer dans tous les vertex shaders"/>

Les coordonnées passées à la fonction `getCoords(x,y)` sont alignées sur les cellules des tableaux. Ainsi, le coin supérieur gauche de la cellule en haut à gauche aura pour coordonnées `(0,0)`, son centre `(0.5,0.5)`, son coin inférieur droit `(1,1)`, etc.

Dans tout le jeu, c'est ce système de coordonnées basé sur un tableau que l'on utilisera.

Pour passer d'un affichage 64x64 à 32x32 par cellule, il suffit de changer la valeur de `uniW` de `1` à `2`.

# Les murs

<img src="css/assets/boulder-dash/wall.jpg" width="256" class="right"/>

Nous avons différents types d'éléments dans nos tableaux. On va donc découper tout cela en couches et commencer par décrire comment on peut afficher les murs.

Dans le jeu original, chaque cellule était représentée par une image. Ainsi, toutes le murs avaient le même visuel.
Nous allons plutôt faire en sorte que les murs soient le plus différents possibles et pour cela, nous allons utiliser une texture de 512x512 ce qui équivaut à une surface de 8x8 cellules (chaque cellule fera 64x64 pixels).

Nous allons donc créer deux triangles par cellule représentant un mur (`w`).

<x-code src="mod/assets/boulder-dash/a/wall-painter.js" section="getVertexArray"/>

<ex src="mod/assets/boulder-dash/a/wall.vert" label="Vertex Shader"/>
Il faut bien noter que l'instruction `#include` __n'esiste pas__ en GLSL.
Nous l'utilisons parce que le constructeur de Program du fichier `webgl.js` permet d'inclure des bouts de code.
Voici comment ça s'utilise :
<x-code>
WebGL.fetchAssets({
  wallVert: "wall.vert",
  wallFrag: "wall.frag",
  coordsVert: "../coords.vert"
}).then(function(assets) {
    ...
    var prg = new WebGL.Program( gl, {
      vert: assets.wallVert,
      frag: assets.wallFrag
    }, {
      // Le code des includes se trouve ici.
      coords: assets.coordsVert
    });
    ...
});
</x-code>

<ex src="mod/assets/boulder-dash/a/wall.frag" label="Fragment Shader"/>
<ex src="mod/assets/boulder-dash/a/wall-painter.js" label="Création d'une texture" section="createTexture"/>
<ex src="mod/assets/boulder-dash/a/wall-painter.js" label="Fonction d'affichage" section="draw"/>

Je ne rentre pas dans les détails de chaque portion du code nécessaire,
mais n'hésitez pas à l'<a href="css/assets/boulder-dash/a/index.html">analyser par vous même</a>.le résultat.

## Optimisation

Le code que nous avons écrit fonctionne très bien, mais il est loin d'être très économe en vertex.
En effet, rien que pour une cellule, on utilise 6 vertex alors qu'il n'y a que 4 coins.
Avoir des vertex ayant exactement les mêmes attributs est inutile et risque de plomber les performances
sur des jeux plus complexes. Nous allons donc voir comment optimiser la chose, même si ce n'est pas vraiment nécessaire pour un simple Boulder-Dash&trade;.

L'idée est d'utiliser un `drawElements(mode, count, type, offset)` à la place du `drawArrays(mode, first, count)`.

Avec cette fonction, on passe un tableau d'indices sur un tableau de vertex. Voici ce que ça donne pour une cellule.
Voici les 4 attributs :
<table class='grd tbl'>
    <tr><th>0</th><th>1</th><th>2</th><th>3</th></tr>
    <tr><td>(0,0)</td><td>(1,0)</td><td>(1,1)</td><td>(0,1)</td></tr>
</table>

Et voici les indices qui permettent de dessiner les 2 triangles :
<table class='grd tbl'>
    <tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr>
    <tr><td>0</td><td>1</td><td>2</td><td>0</td><td>2</td><td>1</td></tr>
</table>

Ainsi, le vertex shader sera appelé 4 fois au lieu de 6. C'est déjà un beau gain, mais ce n'est pas tout puisque quand deux cellules sont adjacentes, elles partagent aussi deux vertex. On va donc beaucoup diminuer les appels au vertex shader.

Et voilà <a href="css/assets/boulder-dash/b/index.html">le résultat</a>.
On est passé de 1080 vertex à seulement 360.

## Plus d'optimisation

On a déjà divisé par trois le nonbre de vertex, mais il est possible de faire beaucoup mieux.
En effet, au lieu de dessiner un carrè pour chaque cellule, on pourrait faire de grands rectangles englobant plusieurs cellules.

<ex src="mod/assets/boulder-dash/c/wall-painter.js"
    label="Voyons comment on pourrait faire ça" section="getArrays"/>

Et voilà <a href="css/assets/boulder-dash/c/index.html">le résultat</a>. On est tombé à seulement __20 vertex__. Et les indices sont passés de 1080 à __36__.


# Les feuilles

<img src="css/assets/boulder-dash/img/fill.png" class="right"/>
Il faut maintenant afficher la terre.
Pour cela, nous avons décidé de dessiner des feuilles qui débordent sur les cellules adjacentes.
L'image des feuilles (ci-contre) a une dimension de 80x80.

Pour chaque cellule de terre (feuille) nous utiliserons un et un seul vertex avec les attributs `attX` et `attY`.

Les cellules vont forcément se chevaucher puisque pour une cellule de 64x64, on va afficher une image de 80x80.
Il va donc falloir utiliser la technique du Z-Buffer pour éviter de dessiner des pixels où il y en a déjà.

Voici comment on active le Z-buffer (un pixel sera affiché seulement si sa coordonnée `z` est strictement supérieure à celle du pixel actuellement à l'écran) :
<x-code>
gl.enable( gl.DEPTH_TEST );
gl.clearDepth( 0 );
gl.depthFunc( gl.GREATER );     
</x-code>

Ici, plus besoin de passer par un `drawElements`, mais il y a quelques subtilités au niveau des shaders :
<ex src="mod/assets/boulder-dash/d/wall.vert" label="Vertex Shader"/>
<ex src="mod/assets/boulder-dash/d/wall.frag" label="Fragment Shader"/>

Nous avons utilisé le mode `gl.POINTS` à la place de `gl.TRIANGLES`. Ainsi, chaque vertex donne lieu à une _point_.
Il est possible de définir la taille de ce point carré en pixels avec la variable globale de shader `gl_PointSize`.
De plus, chaque fragment peut lire sa position à l'intérieur du point grâce au vecteur global `gl_PointCoord` qui donne `(0,0)` pour le coin supérieur gauche et `(1,1)` pour le coin inférieur droit.

Dernière chose : l'instruction `discard` dans le fragment shader.
Cela indique que le fragement courant de doit pas être affiché.
Dans notre cas, nous n'affichons par les fragments dont la couleur à une opacité inférieure à 10%.

Et voilà <a href="css/assets/boulder-dash/d/index.html">le résultat</a>.


# Les pierres

<img src="css/assets/boulder-dash/img/boulders.png" class="right"/>
Pour casser la monotonie, nous avons dessiné 16 images pour la pierre et nous afficherons aléatoirement une de ces 16 à chaque emplacement. Il nous faut donc un attribut de plus : l'index de l'image à afficher.

Pour accélérer le téléchargement et minimiser le nombre de textures à envoyer dans la carte graphique, nous allons créer une image contenant les 16 pierres rangée en 4 lignes et 4 colonnes.

<ex src="mod/assets/boulder-dash/e/wall.vert" label="Vertex Shader"/>
<ex src="mod/assets/boulder-dash/e/wall.frag" label="Fragment Shader"/>

Notez que l'index de la pierre à afficher est un nombre réal allant de 0 à 3.75 inclus.
C'est une astuce pour minimiser les calculs à faire dans le vertex shader.

Et voilà <a href="css/assets/boulder-dash/e/index.html">le résultat</a>.


# Les diamants

<img src="css/assets/boulder-dash/img/diams.png" class="right"/>
Le principe est proche de celui utilisé pour les pierres, mais nous allons ajouter une animation des diamants pour leur donner l'impression de tourner sur eux-même.

Pour cela, il va falloir passer un nouvel uniform pour le temps (`uniTime`) et faire quelques cabrioles mathématiques pour modifier l'index de l'image à utiliser.

<ex src="mod/assets/boulder-dash/f/wall.vert" label="Vertex Shader"/>

L'utilisation du modulo permet d'avoir des sauts de 0.25 entre deux valeurs consécutives.

Et voilà <a href="css/assets/boulder-dash/f/index.html">le résultat</a>.


# L'arrière-plan

Pour remplir un peu, nous allons ajouter un arrière-plan de terre et vieilles racines.
Ce sera une texture de 1024x1024 pixels qui va se répéter sur tout l'écran visible.
Les vertex seront donc au nombre de 4 : `(-1,-1)`, `(-1,+1)`, `(+1,+1)` et `(+1,-1)`.
Et on les affichera avec un `drawArrays(gl.TRIANGLE_STRIP, ...)`.

Pour donner une impression de relief, nous ferons défiler cet arrière-plan avec le reste du tableau, mais légèrement plus lentement, pour donner l'ullusion que c'est un plan plus éloigné.

<ex src="mod/assets/boulder-dash/g/background.vert" label="Vertex Shader"/>
<ex src="mod/assets/boulder-dash/g/background.frag" label="Fragement Shader"/>

L'arière-plan doit être __affiché en dernier__. Cela permet d'utiliser le Z-buffer pour ne pas dessiner des pixels qui sont déjà à l'écran et qui sont positionné plus en avant.

<x-code>
env.z = 0.5;
groundPainter.draw( env );
env.z = 0.4;
boulderPainter.draw( env );
diamPainter.draw( env );
wallPainter.draw( env );
env.z = 0;
backgroundPainter.draw( env );
</x-code>

Et voilà <a href="css/assets/boulder-dash/g/index.html">le résultat</a>.


# Le héro

<img src="css/assets/boulder-dash/img/mole.png" class="right"/>
Tous les éléments mobiles du jeu (héro, pierres, diamants, ...) se déplacent à la vitesse d'une cellule toutes les 200 millisecondes.
On a donc un point de synchronisation toutes les 200 ms au moment duquel tous les éléments sont au centre de leur cellule.

On définit donc la variable `env.cellTime` comme étant le temps qu'il faut (en millisecondes) pour traverser une cellule. On en déduit le code suivant pour la synchronisation.
<ex src="mod/assets/boulder-dash/h/script.js" label="Repérer les points de synchronisation" section="synchro"/>
Et voici la fonction `processHero` qui réalise le déplacement en fonction des touches actuellement enfoncées.
<ex src="mod/assets/boulder-dash/h/script.js" label="Gestion des mouvements du héro" section="ProcessHero"/>

Le héro est animé (un peu comme les diamants) et il doit se déplacer entre les moments de synchronisation sans que l'on doive mettre à jour ses attributs. Pour cela, il aura 5 attributs :
* `attX` : Colonne du tableau.
* `attY` : Ligne du tableau.
* `attVx` : Direction de déplacement horizontal. Peut prendre uniquement les valeurs -1, 0 ou +1.
* `attVy` : Direction de déplacement vertical. Peut prendre uniquement les valeurs -1, 0 ou +1.
* `attIndex` : Les images pour l'animation de héro sont stoqueés sur 4 lignes. `attIndex` indique la ligne qui est actuellement utilisée pour l'animation.

Voici le vertex shader :
<x-code>
// On inclut la fonction getCoords().
// Taille réelle du canvas, en pixels.
uniform float uniWidth;
uniform float uniHeight;
// Coordonnées du centre.
uniform float uniX;
uniform float uniY;
// Profondeur.
uniform float uniZ;
// Facteur de zoom.
uniform float uniW;
// Temps.
uniform float uniTime;
// Temps em ms pour parcourir une cellule.
uniform float uniCellTime;

attribute float attX;
attribute float attY;
attribute float attVx;
attribute float attVy;

vec4 getCoords() {
  float t = mod( uniTime, uniCellTime ) / uniCellTime;
  float xx = (attX + t * attVx - uniX) * 128.0 / uniWidth;
  float yy = (attY + t * attVy - uniY) * 128.0 / uniHeight;
  
  return vec4( xx, -yy, uniZ, uniW );
}


attribute float attIndex;

varying vec2 varUV;

void main() {
  float t = 4.0 * mod( uniTime, uniCellTime ) / uniCellTime;
  float u = 0.25 * floor( t );
  float v = attIndex * 0.25;
  varUV = vec2( u, v );
  
  gl_PointSize = 64.0 / uniW;
  gl_Position = getCoords();
}
</x-code>

Pour les mouvements, il faut pouvoir utiliser le clavier, mais aussi le touch sur smartphone, et pourquoi pas les gamepads. Nous allons donc abstraire dans le module `game-input.js` l'interaction avec l'utilisateur et présenter uniquement l'attribut `action`.
<ex src="mod/assets/boulder-dash/game-inputs.js" label="Interractions avec l'utilisateur"/>

Pour finir, voici comment on gère le scrolling. On veut respecter deux contraintes (la première ayant priorité sur la seconde) :
* On ne doit jamais voir au delà de l'enceinte extérieure du tableau.
* Le héro doit être au centre de l'écran.

<ex src="mod/assets/boulder-dash/h/script.js" label="Gestion du scrolling" section="camera"/>

Et voilà <a href="css/assets/boulder-dash/h/index.html">le résultat</a>.


# Creuser des tunnels

Ce que l'on veut maintenant c'est que le héro supprime les feuilles sur son passage.
Pour cela, lors de chaque synchronisation, on va appeler la méthode `hitCell(row, col)` du module `ground-painter.js` avec la prohaine position du héro.

<ex src="mod/assets/boulder-dash/i/ground-painter.js" label="hitCell(row, col)" section="hitCell"/>
<ex src="mod/assets/boulder-dash/i/ground-painter.js" label="Initialisation de _mapCells"
    section="getVertexArray"/>

Et voilà <a href="css/assets/boulder-dash/i/index.html">le résultat</a>.


# Faire tomber les pierres et les diamants

Les pierre et les diamants sont mobiles, alors il faut les traiter comme le héro, c'est-à-dire leur ajouter les attribus `attVx` et `attVy`.

Voici comment on gère la chute des pierres et diamants :
<ex src="mod/assets/boulder-dash/j/boulder-painter.js" label="Acter le déplacement" section="applyMoves"/>
<ex src="mod/assets/boulder-dash/j/boulder-painter.js" label="Calculer les chutes" section="computeNextMoves"/>

Et voilà <a href="css/assets/boulder-dash/j/index.html">le résultat</a>.
<<<<<<< HEAD
=======

>>>>>>> 201c07e772de6b434624a2fe3ff4c1ad3ea91bd4
</page>
