require("wdg.gl6-2",function(e,n){function r(){return s(u,arguments)}function t(e){function n(e){window.requestAnimationFrame(n);var t,o,i,l,g=e/1766.781248,A=Math.cos(g),h=Math.sin(g),v=e/1979.998511,E=Math.cos(v),_=Math.sin(v),R=A,b=0,p=h,F=h*_,P=E,T=-A*_,C=-h*E,m=_,S=A*E;for(l=0;l<u;l++)t=c[3*l+0],o=c[3*l+1],i=c[3*l+2],s[6*l+0]=t*R+o*b+i*p,s[6*l+1]=t*F+o*P+i*T,s[6*l+2]=t*C+o*m+i*S;d.sort(function(e,n){return s[6*n+2]-s[6*e+2]}),r.bindBuffer(r.ARRAY_BUFFER,a),r.bufferData(r.ARRAY_BUFFER,s,r.STATIC_DRAW),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,f),r.bufferData(r.ELEMENT_ARRAY_BUFFER,d,r.STATIC_DRAW),r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),r.drawElements(r.POINTS,u,r.UNSIGNED_SHORT,0)}var r=e.getContext("webgl")||e.getContext("experimental-webgl"),t=r.createProgram();r.attachShader(t,i(r,g.vertex)),r.attachShader(t,o(r,g.fragment)),r.linkProgram(t),r.useProgram(t);var a=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,a);var u=56,s=new Float32Array(6*u);r.bufferData(r.ARRAY_BUFFER,s,r.STATIC_DRAW);var c=[],d=new Uint16Array(u),f=r.createBuffer();r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,f),r.bufferData(r.ELEMENT_ARRAY_BUFFER,d,r.STATIC_DRAW),function(){var e,n,r,t,a,o,i,f,g=6;for(n=0;n<u-g;n++)e=l(),s[6*n+3]=e.r,s[6*n+4]=e.g,s[6*n+5]=e.b,d[n]=n,i=.2*Math.PI+.6*n*Math.PI/(u-g-1),f=8.7*n*Math.PI/(u-g-1),a=Math.cos(i),o=Math.sin(i),r=o*Math.cos(f),t=o*Math.sin(f),c.push(r,t,a);for(n=u-g;n<u;n++)e=l(),d[n]=n,s[6*n+3]=e.r,s[6*n+4]=e.g,s[6*n+5]=e.b,c.push(0,0,2*(n-u+g)/(g-1)-1)}();var A=s.BYTES_PER_ELEMENT,h=6*A,v=r.getAttribLocation(t,"attPosition");r.enableVertexAttribArray(v),r.vertexAttribPointer(v,3,r.FLOAT,!1,h,0);var E=r.getAttribLocation(t,"attColor");r.enableVertexAttribArray(E),r.vertexAttribPointer(E,3,r.FLOAT,!1,h,3*A),Boolean(this.zbuffer)?(r.enable(r.DEPTH_TEST),r.depthFunc(r.LEQUAL),r.disable(r.BLEND),r.enable(r.BLEND),r.blendFunc(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA)):(r.enable(r.BLEND),r.blendFunc(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA),r.disable(r.DEPTH_TEST)),r.clearColor(0,0,0,1),r.bindBuffer(r.ARRAY_BUFFER,a),window.requestAnimationFrame(n)}function a(e,n,r){var t=n.createShader(e);return n.shaderSource(t,r),n.compileShader(t),n.getShaderParameter(t,n.COMPILE_STATUS)?t:(console.log(r),console.error("An error occurred compiling the shader: "+n.getShaderInfoLog(t)),null)}function o(e,n){return a(e.FRAGMENT_SHADER,e,n)}function i(e,n){return a(e.VERTEX_SHADER,e,n)}function l(){var e=Math.random(),n=Math.random(),r=Math.random();return e<n?r<e?(e=1,r=0):(e=1,n>r?r=0:n=0):n>r?(e=1,r=0):(n=0,e>r?e=1:r=1),{r:e,g:n,b:r}}var u={en:{}},s=require("$").intl,c=require("dom"),d=require("tfw.data-binding"),f=function(e){var n=c.elem(this,"canvas");d.propInteger(this,"width")(function(e){n.setAttribute("width",e),n.style.width=e+"px"}),d.propInteger(this,"height")(function(e){n.setAttribute("height",e),n.style.height=e+"px"}),d.propBoolean(this,"zindex"),e=d.extend({width:640,height:480,zbuffer:!1},e,this),window.setTimeout(t.bind(this,n),20)};n.exports=f;var g={vertex:"attribute vec3 attPosition;\nattribute vec3 attColor;\n\nvarying vec3 varPosition;\nvarying vec3 varColor;\n\nvoid main() {\n  float z = attPosition.z;\n  // Dans une projection 3D, les points éloignés de la caméra\n  // paraissent plus petits et plus proches les uns des autres.\n  // Cette variable permet de créer cet effet.\n  float depth = (1.5 - z) / 2.5;\n  gl_Position = vec4(attPosition.xy * depth, z, 1.0);\n\n  // La taille du point dépend aussi de la profondeur.\n  gl_PointSize = 80.0 * depth;\n  varPosition = attPosition;\n  varColor = attColor;\n}\n",fragment:"precision mediump float;\n\nvarying vec3 varPosition;\nvarying vec3 varColor;\n\nconst vec3 WHITE = vec3(1.0, 1.0, 1.0);\n\nvoid main() {\n  // Calculons la distance du fragment courant\n  // au centre du point.\n  float x = gl_PointCoord.x - 0.5;\n  float y = gl_PointCoord.y - 0.5;\n  // On ne calcule pas la racine carré pour gagner du temps.\n  float r = x*x + y*y;\n\n  x = gl_PointCoord.x;\n  y = gl_PointCoord.y;\n\n  // 0.25 = 0.5 * 0.5\n  if (r > 0.25) {\n    // Si on est à l'extérieur du cercle de rayon 0.5,\n    // on place un fragment transparent.\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 0.0 );\n  } else if (r > .2 ) {\n    // Au delà d'un certain rayon, on met une couleur fixe\n    // qui nous sert de liseré.\n    gl_FragColor = vec4(varColor, 1.0);\n  } else {\n    // Petit effet de dégradé.\n    vec3 col = x * varColor + y * WHITE;\n    gl_FragColor = vec4( col, 0.9 );\n  }\n  // La luminosité varie avec la profondeur du point.\n  // En `z = 0.0`, la boule est noire.\n  gl_FragColor = vec4( gl_FragColor.rgb * (1.0 - varPosition.z) / 2.0, gl_FragColor.a);\n}\n"};n.exports._=r});
//# sourceMappingURL=wdg.gl6-2.js.map