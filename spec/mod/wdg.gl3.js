require("wdg.gl3",function(r,t,n){function e(r){var t=r.getContext("webgl")||r.getContext("experimental-webgl");console.info("[wdg.gl3] 'fragment-' + this.fragment=...","fragment-"+this.fragment);var n=t.createProgram();t.attachShader(n,a(t,g.vertex)),t.attachShader(n,i(t,g["fragment-"+this.fragment])),t.linkProgram(n),t.useProgram(n);var e=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,e);for(var o,l,s=r.width,f=r.height,h=[s/2,f/2],c=.49*Math.min(s,f),u=0;u<=127;u++)l=2*Math.PI*u/127,o=c*(.8+.2*Math.cos(7*l)),h.push(s/2+o*Math.cos(l)),h.push(f/2+o*Math.sin(l));t.bufferData(t.ARRAY_BUFFER,new Float32Array(h),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,e);var d=t.getAttribLocation(n,"attVertexPosition");t.enableVertexAttribArray(d),t.vertexAttribPointer(d,2,t.FLOAT,!1,0,0);var v=t.getUniformLocation(n,"uniWidth"),x=t.getUniformLocation(n,"uniHeight");t.uniform1f(v,r.width),t.uniform1f(x,r.height),t.clearColor(0,0,1,1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t.drawArrays(t.TRIANGLE_FAN,0,129)}function o(r,t,n){var e=t.createShader(r);return t.shaderSource(e,n),t.compileShader(e),t.getShaderParameter(e,t.COMPILE_STATUS)?e:(console.log(n),console.error("An error occurred compiling the shader: "+t.getShaderInfoLog(e)),null)}function i(r,t){return o(r.FRAGMENT_SHADER,r,t)}function a(r,t){return o(r.VERTEX_SHADER,r,t)}var l=function(){function t(){return e(n,arguments)}var n={en:{}},e=r("$").intl;return t.all=n,t}(),g={vertex:"attribute vec3 attVertexPosition;\r\n\r\nuniform float uniWidth;\r\nuniform float uniHeight;\r\n\r\nvarying lowp vec3 varVertexPosition;\r\n\r\nvoid main() {\r\n  varVertexPosition = attVertexPosition;\r\n  \r\n  float x = attVertexPosition.x;\r\n  float y = attVertexPosition.y;\r\n\r\n  x = (2.0 * x / uniWidth) - 1.0;\r\n  y = 1.0 - (2.0 * y / uniHeight);\r\n\r\n  gl_Position = vec4( x, y, 0.0, 1.0 );\r\n}\r\n","fragment-a":"varying lowp vec3 varVertexPosition;\r\n\r\nvoid main() {\r\n  if (mod( varVertexPosition.x, 20.0 ) > 6.0) {\r\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n  } else {\r\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n  }\r\n}\r\n","fragment-b":"varying lowp vec3 varVertexPosition;\r\n\r\nvoid main() {\r\n  lowp float x = varVertexPosition.x;\r\n  lowp float y = varVertexPosition.y;\r\n\r\n  highp float radius = sqrt( (x*x) + (y*y) );\r\n\r\n  highp float r = abs( cos( radius / 77.12 ) );\r\n  highp float g = abs( cos( radius / 33.27 ) );\r\n  highp float b = abs( cos( radius / 62.43 ) );\r\n  \r\n  gl_FragColor = vec4( r, g, b, 1.0 );\r\n}\r\n","fragment-c":"varying lowp vec3 varVertexPosition;\r\n\r\nvoid main() {\r\n  // Couleur de la trame.\r\n  lowp float r1 = 1.0;\r\n  lowp float g1 = 0.5;\r\n  lowp float b1 = 0.0;\r\n  // Couleur du fond.\r\n  lowp float r2 = 0.0;\r\n  lowp float g2 = 0.0;\r\n  lowp float b2 = 1.0;\r\n\r\n  lowp float x = mod( varVertexPosition.x, 16.0 ) - 8.0;\r\n  lowp float y = mod( varVertexPosition.y, 16.0 ) - 8.0;\r\n\r\n  highp float radius = sqrt( (x*x) + (y*y) );\r\n\r\n  highp float dist = sqrt( varVertexPosition.x * varVertexPosition.x \r\n                           + varVertexPosition.y * varVertexPosition.y );\r\n  dist = dist / 300.0;\r\n  \r\n  lowp float limit = dist * 9.0;\r\n\r\n  if( radius < limit ) gl_FragColor = vec4( r1, g1, b1, 1.0 );\r\n  else {\r\n    // Ici, on fait de l'anti-aliasing.\r\n    lowp float c2 = clamp( radius - limit, 0.0, 1.0 );\r\n    lowp float c1 = 1.0 - c2;\r\n    gl_FragColor = vec4( c1 * r1 + c2 * r2, \r\n                         c1 * g1 + c2 * g2, \r\n                         c1 * b1 + c2 * b2, \r\n                         1.0 );\r\n  }\r\n}\r\n"},s=r("dom"),f=r("tfw.data-binding"),h=function(r){var t=s.elem(this,"canvas");f.propInteger(this,"width")(function(r){t.setAttribute("width",r),t.style.width=r+"px"}),f.propInteger(this,"height")(function(r){t.setAttribute("height",r),t.style.height=r+"px"}),f.propString(this,"fragment"),r=f.extend({width:640,height:480,fragment:"a"},r,this),window.setTimeout(e.bind(this,t),20)};t.exports=h,t.exports._=l});
//# sourceMappingURL=wdg.gl3.js.map