/** @module tfw.view.file-input */require( 'tfw.view.file-input', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    "use strict";

var $ = require("dom");


var CODE_BEHIND = {
  onAction: onAction
};


function onAction() {
  var input = this.$elements.input;
  ensureInputHasEventListener.call( this, input.$ );
  $.addClass( this.$elements.filename, "hide" );
  input.$.click();
}


function ensureInputHasEventListener( element ) {
  if( this._inputHasEventListener ) return;
  this._inputHasEventListener = true;
  
  var that = this;
  var divFilename = this.$elements.filename.$;
  
  element.addEventListener( "change", function(evt) {
    var files = evt.target.files;
    if( files.length === 0 ) return;
    var file = files[0];
    divFilename.textContent = file.name;
    $.removeClass( divFilename, "hide" );
    that.file = file;
  }, false);
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    var TfwViewButton = require('tfw.view.button');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "onAction" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_string = Converters.get('string');
    var conv_enum = Converters.get('enum');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("text", { cast: conv_string });
        pm.create("type", { cast: conv_enum(["default","primary","secondary"]) });
        pm.create("action", { cast: conv_string });
        pm.create("file");
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        var e_0 = new Tag('DIV');
        var e_1 = new TfwViewButton({
          icon: "import",
          flat: true,
          wide: true
        });
        $.add( e_0, e_1 );
        var e_2 = new Tag('DIV');
        var e_filename = new Tag('DIV', ["class"]);
        this.$elements.filename = e_filename;
        $.add( e_2, e_filename );
        var e_input = new Tag('INPUT', ["type"]);
        this.$elements.input = e_input;
        $.add( e_, e_0, e_2, e_input );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'text'},
          B:{obj: e_1,
              name: 'text'},
          name:"text > e_1/text"
        });
        new Link({
          A:{obj: that,
              name: 'action'},
          B:{obj: e_1,
              name: 'action'},
          name:"action > e_1/action"
        });
        //-----------------------
        // On attribute changed.
        pm.on( "action", function(v) {
          try {
            CODE_BEHIND.onAction.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onAction" of module "mod/tfw.view.file-input.js" for attribute "action"!  ');
            console.error( ex );
          }} );
        //----------------------
        // Initialize elements.
        e_.class = "tfw-view-file-input";
        e_filename.class = "filename hide";
        e_input.type = "file";
        //------------------------
        // Initialize attributes.
        this.text = args["text"];
        this.type = defVal(args, "type", "default");
        this.action = args["action"];
        this.file = args["file"];
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/tfw.view.file-input.js', ex);
        throw Error('Instantiation error in XJS of "mod/tfw.view.file-input.js":\n' + ex)
      }
    };
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/tfw.view.file-input.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module tfw.view.file-input
 * @see module:$
 * @see module:dom
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters
 * @see module:tfw.view.button

 */
});