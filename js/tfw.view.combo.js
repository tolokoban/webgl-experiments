/** @module tfw.view.combo */require( 'tfw.view.combo', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    "use strict";

var CODE_BEHIND = {
  onIndexChange: onIndexChange,
  onKeysChange: onKeysChange,
  onItemsChange: onItemsChange,
  onValueChange: onValueChange,
  onExpandedChange: onExpandedChange
};

var $ = require("dom");
var PM = require("tfw.binding.property-manager");
var Touchable = require("tfw.touchable");


function onItemsChange( items ) {
  var that = this;
  var list = $(this.$elements.list);
  var button = $(this.$elements.button);
  $.clear( list );
  this._listHeight = 0;
  this._itemsDivs = [];

  items.forEach(function (val, index) {
    that._listHeight += 32;
    var item = $.div([ val ]);
    that._itemsDivs.push( item );
    $.add( list, item );
    var touchable = new Touchable( item );
    touchable.tap.add( onItemTap.bind( that, item, list, index, button ) );
  });

  if( !this.index ) this.index = 0;
}


function onItemTap( item, list, index, button ) {
  var itemsCount = getLength.call( this, this.items );
  if( itemsCount < 2 ) return;
  
  if( this.expanded ) {
    // List is expanded.
    $.css( list, {
      transform: "translateY(-" + 32*index + "px)",
      left: 0, top: 0,
      height: "auto"
    });
  } else {
    // List is collapsed.
    $.addClass( item, 'thm-bgSL' );
    if( itemsCount === 2 ) {
      this.index = 1 - this.index;
      return;
    }
    var rect = button.getBoundingClientRect();
    var top = rect.top - 32 * index;
    var topLimit = top - 32 * Math.floor( top / 32 );
    if( top < 0 ) top = topLimit;
    while( top > topLimit && top + this._listHeight > document.body.clientHeight - 8 ) {
      top -= 32;
    }
    top += 32 * index;
    $.css( list, {
      left: rect.left + "px",
      top: top + "px",
      height: "auto"
    });
    $.css( button, {
      width: this.wide ? 'auto' : list.getBoundingClientRect().width + 'px'
    });
  }
  this.index = index;
  this.expanded = !this.expanded;
}


function onIndexChange( index ) {
  if( hasKeys.call( this ) ) {
    this.value = this.keys[index];
  }
  else {
    this.value = index;
  }
}


function hasKeys() {
  var keysCount = getLength.call( this, this.keys );
  if( keysCount < 1 ) return false;
  return keysCount === getLength.call( this, this.items );
}


function getLength( arr ) {
  if( !arr ) return 0;
  if( !Array.isArray( arr ) ) return 0;
  return arr.length;
}


function onKeysChange( keys ) {
  if( typeof this.index !== 'number' ) return;
  onIndexChange.call( this, this.index );
}


function onValueChange( value ) {
  var index;
  if( hasKeys.call( this ) ) {
    index = this.keys.indexOf( value );
    if( index < 0 ) index = 0;
    PM( this ).set( "index", index );
  }
  else {
    index = parseInt( value );
    if( !isNaN( index ) && index >= 0 && index < getLength.call( this, this.items ) ) {
      PM( this ).set( "index", index );
    }
  }
  var list = $(this.$elements.list);
  $.css( list, {
    transform: "translateY(-" + 32*this.index + "px)",
    left: 0, top: 0,
    height: "auto"
  });
}


function onExpandedChange( expanded ) {
  if( !expanded ) {
    this._itemsDivs.forEach(function (itemDiv) {
      $.removeClass( itemDiv, 'thm-bgSL' );
    });
  }
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    var TfwViewIcon = require('tfw.view.icon');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "onItemsChange", "onKeysChange", "onExpandedChange", "onIndexChange", "onValueChange" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    function addClassIfTrue(element, className, value) {
    if( value ) $.addClass(element, className);
    else $.removeClass(element, className); };;
    function addClassIfFalse(element, className, value) {
    if( value ) $.removeClass(element, className);
    else $.addClass(element, className); };;
    //-------------------
    // Global variables.
    var conv_boolean = Converters.get('boolean');
    var conv_string = Converters.get('string');
    var conv_array = Converters.get('array');
    var conv_integer = Converters.get('integer');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("wide", { cast: conv_boolean });
        pm.create("label", { cast: conv_string });
        pm.create("items", { cast: conv_array });
        pm.create("keys", { cast: conv_array });
        pm.create("expanded", { cast: conv_boolean });
        pm.create("index", { cast: conv_integer(0) });
        pm.create("value", { cast: conv_string });
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        var e_0 = new Tag('HEADER', ["textcontent"]);
        var e_button = new Tag('DIV', ["class"]);
        var e_screen = new Tag('DIV', ["class"]);
        this.$elements.screen = e_screen;
        var e_list = new Tag('DIV', ["class"]);
        this.$elements.list = e_list;
        var e_4 = new TfwViewIcon({
          content: "down",
          size: 32
        });
        $.add( e_button, e_screen, e_list, e_4 );
        this.$elements.button = e_button;
        $.add( e_, e_0, e_button );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //---------
        // Events.
        View.events(e_screen, {
          "tap": function(v) {
            that.expanded = false;
          }
        });
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'wide'},
          B:{action: function(v) {
          addClassIfTrue( e_, "wide", v );}},
          name:"wide > undefined"
        });
        new Link({
          A:{obj: that,
              name: 'label'},
          B:{obj: e_0,
              name: 'textcontent'},
          name:"label > e_0/textcontent"
        });
        new Link({
          A:{obj: that,
              name: 'expanded'},
          B:{action: function(v) {
          addClassIfTrue( e_button, "show", v );
          addClassIfFalse( e_button, "hide", v );}},
          name:"expanded > undefined"
        });
        //-----------------------
        // On attribute changed.
        pm.on( "items", function(v) {
          try {
            CODE_BEHIND.onItemsChange.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onItemsChange" of module "mod/tfw.view.combo.js" for attribute "items"!  ');
            console.error( ex );
          }} );
        pm.on( "keys", function(v) {
          try {
            CODE_BEHIND.onKeysChange.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onKeysChange" of module "mod/tfw.view.combo.js" for attribute "keys"!  ');
            console.error( ex );
          }} );
        pm.on( "expanded", function(v) {
          try {
            CODE_BEHIND.onExpandedChange.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onExpandedChange" of module "mod/tfw.view.combo.js" for attribute "expanded"!  ');
            console.error( ex );
          }} );
        pm.on( "index", function(v) {
          try {
            CODE_BEHIND.onIndexChange.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onIndexChange" of module "mod/tfw.view.combo.js" for attribute "index"!  ');
            console.error( ex );
          }} );
        pm.on( "value", function(v) {
          try {
            CODE_BEHIND.onValueChange.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onValueChange" of module "mod/tfw.view.combo.js" for attribute "value"!  ');
            console.error( ex );
          }} );
        //----------------------
        // Initialize elements.
        e_.class = "tfw-view-combo thm-ele2 thm-bg2";
        e_button.class = "button";
        e_screen.class = "screen";
        e_list.class = "list thm-ele8";
        //------------------------
        // Initialize attributes.
        this.wide = defVal(args, "wide", false);
        this.label = defVal(args, "label", "");
        this.items = defVal(args, "items", []);
        this.keys = defVal(args, "keys", []);
        this.expanded = defVal(args, "expanded", false);
        this.index = defVal(args, "index", 0);
        this.value = defVal(args, "value", "");
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/tfw.view.combo.js', ex);
        throw Error('Instantiation error in XJS of "mod/tfw.view.combo.js":\n' + ex)
      }
    };
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/tfw.view.combo.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module tfw.view.combo
 * @see module:$
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.touchable
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters
 * @see module:tfw.view.icon

 */
});