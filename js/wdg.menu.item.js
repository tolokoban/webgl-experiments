/** @module wdg.menu.item */require( 'wdg.menu.item', function(require, module, exports) { var _=function(){var D={"en":{"href":"$1.html","img":"css/assets/index/$1.jpg"}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    // Code behind.
"use strict";

var CODE_BEHIND = {
  onLoad: onLoad
};

var $ = require("dom");

function onLoad() {
  $.removeClass( this.$elements.background, "hide" );
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "onLoad" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_string = Converters.get('string');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("id", { cast: conv_string });
        pm.create("title", { cast: conv_string });
        pm.create("keywords", { cast: conv_string });
        //------------------
        // Create elements.
        var e_ = new Tag('A', ["class","href"]);
        var e_background = new Tag('IMG', ["class","src"]);
        this.$elements.background = e_background;
        var e_1 = new Tag('DIV', ["class"]);
        var e_2 = new Tag('DIV');
        var e_3 = new Tag('DIV', ["class","textcontent"]);
        $.add( e_2, e_3 );
        var e_4 = new Tag('DIV');
        var e_5 = new Tag('DIV', ["class","textcontent"]);
        $.add( e_4, e_5 );
        $.add( e_1, e_2, e_4 );
        $.add( e_, e_background, e_1 );
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //---------
        // Events.
        View.events(e_background, {
          "load": CODE_BEHIND.onLoad.bind( this )
        });
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'id'},
          B:{obj: e_,
              name: 'href',
              format: [_, "href"]},
          name:"id > e_/href"
        });
        new Link({
          A:{obj: that,
              name: 'id'},
          B:{obj: e_background,
              name: 'src',
              format: [_, "img"]},
          name:"id > e_background/src"
        });
        new Link({
          A:{obj: that,
              name: 'title'},
          B:{obj: e_3,
              name: 'textcontent'},
          name:"title > e_3/textcontent"
        });
        new Link({
          A:{obj: that,
              name: 'keywords'},
          B:{obj: e_5,
              name: 'textcontent'},
          name:"keywords > e_5/textcontent"
        });
        //----------------------
        // Initialize elements.
        e_.class = "wdg-menu-item thm-ele4 thm-bg3";
        e_background.class = "hide";
        e_1.class = "table";
        e_3.class = "title";
        e_5.class = "keywords";
        //------------------------
        // Initialize attributes.
        this.id = defVal(args, "id", "");
        this.title = defVal(args, "title", "");
        this.keywords = defVal(args, "keywords", "");
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/wdg.menu.item.js', ex);
        throw Error('Instantiation error in XJS of "mod/wdg.menu.item.js":\n' + ex)
      }
    };
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/wdg.menu.item.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module wdg.menu.item
 * @see module:$
 * @see module:dom
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters

 */
});