{"version":3,"sources":["saber-plasma.js"],"names":["require","module","createMesh","ring","sectors","angleStep","Math","PI","line","arrayVert","arrayElem","k","length","i","ang","radius","y","x","cos","z","sin","push","idxRing0","idxRing1","A","B","C","D","Float32Array","Uint16Array","GLOBAL","M4","m4","Colors","Program","Plasma","gl","prg","vert","frag","buffVert","createBuffer","buffElem","countElem","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","projection","identity","rotation","translation","color","PLASMA","use","$uniProjection","$uniRotation","$uniTranslation","$uniColor","enable","CULL_FACE","DEPTH_TEST","cullFace","BACK","bindAttribs","drawElements","TRIANGLES","UNSIGNED_SHORT","deleteBuffer","exports","_"],"mappings":"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","sourcesContent":["/** @module light-saber.saber-plasma */require( 'light-saber.saber-plasma', function(require, module, exports) { var _=function(){return ''}; const GLOBAL = {\n  \"vert\": \"// Perspective\\r\\nuniform mat4 uniProjection;\\r\\n// Rotation de la multiball.\\r\\nuniform mat4 uniRotation;\\r\\n// Translation.\\r\\nuniform vec4 uniTranslation;\\r\\n\\r\\n// Coordonnées du centre du modèle.\\r\\nattribute vec3 attPoint;\\r\\n\\r\\nvoid main() {\\r\\n  // Rotation, translation et projection en perspective.\\r\\n  vec4 vertex = uniRotation * vec4( attPoint, 1 ) + uniTranslation;\\r\\n  gl_Position = uniProjection * vertex;\\r\\n}\\r\\n\",\n  \"frag\": \"precision mediump float;\\r\\n\\r\\nuniform vec4 uniColor;\\r\\n\\r\\nvoid main() {\\r\\n  gl_FragColor = uniColor;\\r\\n}\\r\\n\"};\n  \"use strict\";\r\n\r\nconst\r\n    M4 = require( \"webgl.math\" ).m4,\r\n    Colors = require( \"light-saber.colors\" ),\r\n    Program = require( \"webgl.program\" );\r\n\r\nclass Plasma {\r\n    constructor( gl ) {\r\n        this.gl = gl;\r\n        this.prg = new Program( gl, {\r\n            vert: GLOBAL.vert,\r\n            frag: GLOBAL.frag\r\n        } );\r\n        this.buffVert = gl.createBuffer();\r\n        this.buffElem = gl.createBuffer();\r\n        const { arrayVert, arrayElem } = createMesh();\r\n        this.arrayVert = arrayVert;\r\n        this.arrayElem = arrayElem;\r\n        this.countElem = arrayElem.length;\r\n\r\n        gl.bindBuffer( gl.ARRAY_BUFFER, this.buffVert );\r\n        gl.bufferData( gl.ARRAY_BUFFER, arrayVert, gl.STATIC_DRAW );\r\n\r\n        gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, this.buffElem );\r\n        gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, arrayElem, gl.STATIC_DRAW );\r\n\r\n        this.projection = M4.identity();\r\n        this.rotation = M4.identity();\r\n        this.translation = new Float32Array( [ 0, 0, 0, 0 ] );\r\n\r\n        this.color = Colors.PLASMA;\r\n    }\r\n\r\n    paint( time, delta ) {\r\n        const { gl, prg, projection, rotation, translation, buffVert, countElem } = this;\r\n\r\n        prg.use();\r\n        gl.bindBuffer( gl.ARRAY_BUFFER, this.buffVert );\r\n        gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, this.buffElem );\r\n\r\n        prg.$uniProjection = projection;\r\n        prg.$uniRotation = rotation;\r\n        prg.$uniTranslation = translation;\r\n        prg.$uniColor = this.color;\r\n\r\n        gl.enable( gl.CULL_FACE );\r\n        gl.enable( gl.DEPTH_TEST );\r\n        gl.cullFace( gl.BACK );\r\n\r\n        prg.bindAttribs( buffVert, \"attPoint\" );\r\n        gl.drawElements( gl.TRIANGLES, countElem, gl.UNSIGNED_SHORT, 0 );\r\n    }\r\n\r\n    destroy() {\r\n        const gl = this.gl;\r\n        gl.deleteBuffer( this.buffVert );\r\n        gl.deleteBuffer( this.buffElem );\r\n    }\r\n}\r\n\r\n/**\r\n * Create the vertex and the element array for the light saber hilt.\r\n * This is merely a cylinder.\r\n *\r\n * @returns {object} `{ arrayVert, arrayElem }`\r\n */\r\nfunction createMesh() {\r\n    const\r\n        sectors = 12,\r\n        angleStep = 2 * Math.PI / sectors,\r\n        line = [\r\n            [ 0, 0.91 ],\r\n            [ 0.02, 0.90 ],\r\n            [ 0.03, 0.89 ],\r\n            [ 0.02, 0 ]\r\n        ],\r\n        arrayVert = [ 0, line[ 0 ][ 1 ], 0 ],\r\n        arrayElem = [];\r\n    // --------------\r\n    // define vertice\r\n    for ( let k = 1; k < line.length; k++ ) {\r\n        const ring = line[ k ];\r\n        for ( let i = 0; i < sectors; i++ ) {\r\n            const\r\n                ang = angleStep * i,\r\n                [ radius, y ] = ring,\r\n                x = radius * Math.cos( ang ),\r\n                z = radius * Math.sin( ang );\r\n            arrayVert.push( x, y, z );\r\n        }\r\n    }\r\n\r\n    // ------------\r\n    // Define faces\r\n\r\n    // Top cone.\r\n    for ( let i = 0; i < sectors; i++ ) {\r\n        arrayElem.push( i + 1, 0, ( ( i + 1 ) % sectors ) + 1 );\r\n    }\r\n\r\n    // Rings.\r\n    for ( let k = 0; k < line.length - 1; k++ ) {\r\n        const\r\n            idxRing0 = 1 + sectors * k,\r\n            idxRing1 = idxRing0 + sectors;\r\n        for ( let i = 0; i < sectors; i++ ) {\r\n            const\r\n                A = idxRing0 + i,\r\n                B = idxRing1 + i,\r\n                C = idxRing1 + ( i + 1 ) % sectors,\r\n                D = idxRing0 + ( i + 1 ) % sectors;\r\n            arrayElem.push( A, C, B );\r\n            arrayElem.push( A, D, C );\r\n        }\r\n    }\r\n\r\n    return {\r\n        arrayVert: new Float32Array( arrayVert ),\r\n        arrayElem: new Uint16Array( arrayElem )\r\n    };\r\n}\r\n\r\nmodule.exports = Plasma;\r\n\r\n\r\nmodule.exports._ = _;\n})"]}