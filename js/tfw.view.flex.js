/** @module tfw.view.flex */require( 'tfw.view.flex', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    // Code behind.
"use strict";


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_array = Converters.get('array');
    var conv_enum = Converters.get('enum');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.create("content", { cast: conv_array });
        pm.create("justifyContent", { cast: conv_enum(["space-between","space-around","center","start","end","flex-start","flex-end","left","right","stretch","space-evently","normal","baseline"]) });
        //------------------
        // Create elements.
        var e_ = new Tag('DIV', ["class"]);
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'content'},
          B:{action: function(v) {
          // Updating children of e_.
          $.clear(e_);
          if( !Array.isArray( v ) ) v = [v];
          v.forEach(function (elem) {
            $.add(e_, elem);
          });}},
          name:"content > undefined"
        });
        //-----------------------
        // On attribute changed.
        pm.on("justifyContent", function(v) {
          e_.$.style["justify-content"] = v;
        });
        //----------------------
        // Initialize elements.
        e_.class = "tfw-view-flex";
        //------------------------
        // Initialize attributes.
        this.content = defVal(args, "content", []);
        this.justifyContent = defVal(args, "justifyContent", "space-between");
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/tfw.view.flex.js', ex);
        throw Error('Instantiation error in XJS of "mod/tfw.view.flex.js":\n' + ex)
      }
    };
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/tfw.view.flex.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module tfw.view.flex
 * @see module:$
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters

 */
});