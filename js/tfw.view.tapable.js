/** @module tfw.view.tapable */require( 'tfw.view.tapable', function(require, module, exports) { var _=function(){var D={"en":{},"fr":{}},X=require("$").intl;function _(){return X(D,arguments);}_.all=D;return _}();
    "use strict";

var CODE_BEHIND = {
  onKeyUp: onKeyUp,
  on: on,
  fire: fire,
  init: init,
  onEnabledChanged: onEnabledChanged
};

var $ = require("dom");
var PM = require("tfw.binding.property-manager");
var Touchable = require("tfw.touchable");

/**
 * @member on
 * Set a event listener to the button.
 * @param {function} slot - function to call when the button is tapped.
 */
function on( slot ) {
  PM( this ).on( "action", slot );
  return this;
}

/**
 * @member fire
 * Fire the tap event.
 * @param {any=undefined} tag - If defined, set `this.tag` to it.
 */
function fire( tag ) {
  if( typeof tag !== 'undefined' ) this.tag = tag;
  if( this.href.length > 0 ) {
    if( this.target.length > 0 ) {
      window.open( this.href, this.target );
    } else {
      window.location = this.href;
    }
  } else {
    this.action = this.tag;
  }
}

function onKeyUp( evt ) {
  if( evt.keyCode != 32 && evt.keyCode != 13 ) return;
  evt.preventDefault();
  evt.stopPropagation();
  fire.call( this );
  this.pressed = false;  
}

function init() {
  var that = this;

  this._touchable = new Touchable( this.$ );
  this._touchable.tap.add(function() { fire.call( that ); });
  this._touchable.enabled = this.enabled;
}

function onEnabledChanged() {  
  if( !this._touchable ) return;
  var enabled = this.enabled && !this.wait;
  this._touchable.enabled = enabled;
  if( enabled ) {
    $.removeAtt( this, "disabled" );
  } else {
    $.att( this, { disabled: true } );
  }
}


//===============================
// XJS:View autogenerated code.
try {
  module.exports = function() {
    //--------------------
    // Dependent modules.
    var $ = require('dom');
    var PM = require('tfw.binding.property-manager');
    var Tag = require('tfw.view').Tag;
    var Link = require('tfw.binding.link');
    var View = require('tfw.view');;
    var Converters = require('tfw.binding.converters');
    //-------------------------------------------------------
    // Check if needed functions are defined in code behind.
    View.ensureCodeBehind( CODE_BEHIND, "onEnabledChanged", "on", "fire", "init", "onKeyUp" );
    //-------------------
    // Global functions.
    function defVal(args, attName, attValue) { return args[attName] === undefined ? attValue : args[attName]; };
    //-------------------
    // Global variables.
    var conv_string = Converters.get('string');
    var conv_boolean = Converters.get('boolean');
    //-------------------
    // Class definition.
    var ViewClass = function( args ) {
      try {
        if( typeof args === 'undefined' ) args = {};
        this.$elements = {};
        var that = this;
        var pm = PM(this);
        //--------------------
        // Create attributes.
        pm.createAction("action")
        pm.create("tag", { cast: conv_string });
        pm.create("content");
        pm.create("pressed", { cast: conv_boolean });
        pm.create("focus", { cast: conv_boolean });
        pm.create("href", { cast: conv_string });
        pm.create("target", { cast: conv_string });
        pm.create("enabled", { cast: conv_boolean });
        //------------------
        // Create elements.
        var e_ = new Tag('BUTTON', ["class","focus"]);
        //-----------------------
        // Declare root element.
        Object.defineProperty( this, '$', {value: e_.$, writable: false, enumerable: false, configurable: false } );
        //---------
        // Events.
        View.events(e_, {
          "keyup": CODE_BEHIND.onKeyUp.bind( this ),
          "down": function(v) {
            that.pressed = true;
          },
          "up": function(v) {
            that.pressed = false;
          }
        });
        //-------
        // Links
        new Link({
          A:{obj: that,
              name: 'focus'},
          B:{obj: e_,
              name: 'focus'},
          name:"focus > e_/focus"
        });
        new Link({
          A:{obj: that,
              name: 'content'},
          B:{action: function(v) {
          // Updating children of e_.
          $.clear(e_);
          if( !Array.isArray( v ) ) v = [v];
          v.forEach(function (elem) {
            $.add(e_, elem);
          });}},
          name:"content > undefined"
        });
        //-----------------------
        // On attribute changed.
        pm.on( "enabled", function(v) {
          try {
            CODE_BEHIND.onEnabledChanged.call( that, v );
          }
          catch( ex ) {
            console.error('Exception in function behind "onEnabledChanged" of module "mod/tfw.view.tapable.js" for attribute "enabled"!  ');
            console.error( ex );
          }} );
        //----------------------
        // Initialize elements.
        e_.class = "tfw-view-tapable";
        //------------------------
        // Initialize attributes.
        this.tag = defVal(args, "tag", "ACTION");
        this.content = args["content"];
        this.pressed = defVal(args, "pressed", false);
        this.focus = defVal(args, "focus", false);
        this.href = defVal(args, "href", "");
        this.target = defVal(args, "target", "");
        this.enabled = defVal(args, "enabled", true);
        // Initialization.
        CODE_BEHIND.init.call( this );
        $.addClass(this, 'view', 'custom');
      }
      catch( ex ) {
        console.error('mod/tfw.view.tapable.js', ex);
        throw Error('Instantiation error in XJS of "mod/tfw.view.tapable.js":\n' + ex)
      }
    };
    //------------------
    // Static members..
    ViewClass.prototype.on = CODE_BEHIND.on;
    ViewClass.prototype.fire = CODE_BEHIND.fire;
    return ViewClass;
  }();
}
catch( ex ) {
  throw Error('Definition error in XJS of "mod/tfw.view.tapable.js"\n' + ex)
}


  
module.exports._ = _;
/**
 * @module tfw.view.tapable
 * @see module:$
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.touchable
 * @see module:dom
 * @see module:tfw.binding.property-manager
 * @see module:tfw.view
 * @see module:tfw.binding.link
 * @see module:tfw.view
 * @see module:tfw.binding.converters

 */
});