"use strict";

/** @module noise.equilaterals */
require('noise.equilaterals', function (require, module, exports) {
  var _ = function _() {
    return '';
  };

  var GLOBAL = {
    "vert": "attribute vec2 attXY;\r\n\r\nvoid main() {\r\n    gl_Position = vec4( attXY, 0, 1);\r\n}\r\n",
    "frag": "#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\n\r\nuniform float uniTime;\r\nuniform float uniCenterX;\r\nuniform float uniCenterY;\r\n\r\nconst vec3 COLOR0 = vec3(.7, 1, 0);\r\nconst vec3 COLOR1 = vec3(.3, 0, 1);\r\nconst vec3 COLOR2 = vec3(1, .4, 0);\r\nconst vec3 COLOR3 = vec3(0, 1, 1);\r\nconst vec3 COLOR4 = vec3(.7, .7, 0);\r\nconst vec3 COLOR5 = vec3(1, .3, .7);\r\nconst vec3 COLOR6 = vec3(1, 1, 0);\r\nconst vec3 COLOR7 = vec3(1, .7, .3);\r\n\r\nconst float ALPHA = sqrt(3.);\r\n\r\nvoid main() {\r\n  float ang = uniTime * 0.0001;\r\n  float c = cos( ang );\r\n  float s = sin( ang );\r\n  mat2 rotation = mat2(c, -s, s, c);\r\n  \r\n  vec2 coords = gl_FragCoord.xy - vec2( uniCenterX, uniCenterY );\r\n  \r\n  float zoom = 0.0075;\r\n  float t = mod( uniTime, 30000.0 );\r\n  float transition;\r\n  \r\n  if( t < 15000.0 ) transition = 0.0;\r\n  else if ( t < 20000.0 ) transition = smoothstep(15000.0, 20000.0, t);\r\n  else if ( t < 25000.0 ) transition = 1.0;\r\n  else transition = 1.0 - smoothstep(25000.0, 30000.0, t);\r\n  \r\n  float alpha = mix(ALPHA, 1.0, transition);\r\n  float sa = (1.0 + alpha);\r\n  float sb = (alpha - 1.0);\r\n  mat2 skew = mat2( sa, sb, sb, sa );\r\n  vec2 pos = skew * rotation * coords * zoom;\r\n  float x = pos.x;\r\n  float y = pos.y;\r\n\r\n  float u2 = fract(x * .5);\r\n  float v2 = fract(y * .5);\r\n  float u = fract(x);\r\n  float v = fract(y);\r\n\r\n  vec3 color;\r\n  \r\n  if( u2 < .5 ) {\r\n    if( v2 < .5 ) {\r\n      if( u < v ) color = COLOR0;\r\n      else color = COLOR1;\r\n    }\r\n    else {\r\n      if( u < v ) color = COLOR2;\r\n      else color = COLOR3;\r\n    }\r\n  }\r\n  else {\r\n    if( v2 < .5 ) {\r\n      if( u < v ) color = COLOR4;\r\n      else color = COLOR5;\r\n    }\r\n    else {\r\n      if( u < v ) color = COLOR6;\r\n      else color = COLOR7;\r\n    }\r\n  }\r\n\r\n  float grayscale = 0.2989 * color.r + 0.5870 * color.g + 0.1140 * color.b;\r\n  gl_FragColor = vec4( mix(color, vec3(grayscale, grayscale, grayscale), transition), 1 );\r\n\r\n  // Afficher la grande diagonale.\r\n  if( abs(u - v) < 0.04 ) gl_FragColor = vec4( gl_FragColor.rgb * 25. * abs( u - v), 1 );\r\n}\r\n"
  };
  "use strict";
  /* exported CODE_BEHIND */


  var CODE_BEHIND = {
    init: init
  };

  var Base = require("noise.base");
  /**
   * @return {undefined}
   */


  function init() {
    var canvas = this.$elements.canvas.$,
        gl = canvas.getContext("webgl", {
      preserveDrawingBuffer: false
    }),
        base = new Base(gl, GLOBAL.frag);
  } //===============================
  // XJS:View autogenerated code.


  try {
    module.exports = function () {
      //--------------------
      // Dependent modules.
      var $ = require('dom');

      var PM = require('tfw.binding.property-manager');

      var Tag = require('tfw.view').Tag;

      var Link = require('tfw.binding.link');

      var View = require('tfw.view');

      ;

      var Converters = require('tfw.binding.converters');

      var TfwViewCheckbox = require('tfw.view.checkbox'); //-------------------------------------------------------
      // Check if needed functions are defined in code behind.


      View.ensureCodeBehind(CODE_BEHIND, "init"); //-------------------
      // Global functions.

      function defVal(args, attName, attValue) {
        return args[attName] === undefined ? attValue : args[attName];
      }

      ;

      function addClassIfTrue(element, className, value) {
        if (value) $.addClass(element, className);else $.removeClass(element, className);
      }

      ;
      ; //-------------------
      // Global variables.

      var conv_boolean = Converters.get('boolean'); //-------------------
      // Class definition.

      var ViewClass = function ViewClass(args) {
        try {
          if (typeof args === 'undefined') args = {};
          this.$elements = {};
          var that = this;
          var pm = PM(this); //--------------------
          // Create attributes.

          pm.create("fullscreen", {
            cast: conv_boolean
          }); //------------------
          // Create elements.

          var e_ = new Tag('DIV', ["class"]);
          var e_canvas = new Tag('CANVAS');
          this.$elements.canvas = e_canvas;
          var e_1 = new Tag('DIV', ["class"]);
          var e_2 = new TfwViewCheckbox({
            content: "Plein Ã©cran",
            wide: false
          });
          $.add(e_1, e_2);
          $.add(e_, e_canvas, e_1); //-----------------------
          // Declare root element.

          Object.defineProperty(this, '$', {
            value: e_.$,
            writable: false,
            enumerable: false,
            configurable: false
          }); //-------
          // Links

          new Link({
            A: {
              obj: that,
              name: 'fullscreen'
            },
            B: {
              action: function action(v) {
                addClassIfTrue(e_, "fullscreen", v);
              }
            },
            name: "fullscreen > undefined"
          });
          new Link({
            A: {
              obj: that,
              name: 'fullscreen'
            },
            B: {
              obj: e_2,
              name: 'value'
            },
            name: "fullscreen > e_2/value"
          }); //----------------------
          // Initialize elements.

          e_.class = "noise-equilaterals";
          e_1.class = "bottom"; //------------------------
          // Initialize attributes.

          pm.set("fullscreen", defVal(args, "fullscreen", false));
          pm.fire("fullscreen"); // Initialization.

          CODE_BEHIND.init.call(this);
          $.addClass(this, 'view', 'custom');
        } catch (ex) {
          console.error('mod/noise.equilaterals.js', ex);
          throw Error('Instantiation error in XJS of "mod/noise.equilaterals.js":\n' + ex);
        }
      };

      return ViewClass;
    }();
  } catch (ex) {
    throw Error('Definition error in XJS of "mod/noise.equilaterals.js"\n' + ex);
  }

  module.exports._ = _;
});
//# sourceMappingURL=equilaterals.js.map